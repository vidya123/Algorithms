#include<iostream>
#include<stack>
#include<string>
#include<map>
using namespace std;
/*Test cases:
str="[";
str="[{}()";
str="}}"
str="{[]}()"

n=>length of string
Time Complexity: O(n)
Space complexity:O(n)
*/
int IsParthensisBalanced(string str) {
	stack<char> stk;
	map<char,char>matchingPair;
	matchingPair['{']='}';
	matchingPair['(']=')';
	matchingPair['[']=']';
	
	for(int i=0;i<str.length();i++){
		if(str[i]=='(' || str[i]=='{' || str[i]=='[') 
			stk.push(str[i]);
		else{
			char value = stk.top();
			if(matchingPair[value]!=str[i])
				return 0;
			else
				stk.pop();
/* 
			switch(value){
				case '(':
						if(str[i]!=')') return 0;
						 break;
				case '{':
						if(str[i]!='}') return 0;
						 break;	
				case '[':
						if(str[i]!=']') return 0;
						 break;	
			}
			stk.pop();
*/
		}
	}
	if(stk.empty()) return 1;
	return 0;
}

int main() {
	string s="]";
	int result = IsParthensisBalanced(s);
	if(result) cout<<"Parathesis are balanced\n";
	else cout<<"Parathesis are not balanced\n";	
	return 0;
}
