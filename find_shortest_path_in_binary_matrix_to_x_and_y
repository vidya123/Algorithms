//find_shortest_path_in_binary_matrix_to_x_and_y
#include<iostream>
#include<queue>
using namespace std;

#define row 5
#define col 10

int  find_shortest_path(int a[row][col],int x,int y) {
	int dist[row][col]={0};
	if(a[0][0] == 0) return -1;
	dist[0][0]=1;
	
	for(int i=1;i<col;i++) 
		dist[0][i] = a[0][i]?a[0][i]+ dist[0][i-1]:a[0][i];
	
	for(int i=1;i<row;i++) 
		dist[i][0] = a[i][0]?a[i][0]+ dist[i-1][0]:a[i][0];
	int j;	
			
	for(int i=1;i<row;i++) {
		for(j=1;j<col;j++) {
		    dist[i][j]= a[i][j];
			if(a[i][j]) {
				if( dist[i][j-1]!=0 && dist[i-1][j]!=0) 
				    dist[i][j]= dist[i-1][j] < dist[i][j-1]?dist[i][j]+dist[i-1][j]:dist[i][j]+dist[i][j-1];
				else 
				    dist[i][j]= dist[i][j-1]!=0?dist[i][j]+dist[i][j-1]:dist[i][j]+dist[i-1][j];
			}
			if(i==x&&j==y) return dist[i][j];
		}
	}
	return dist[row-1][col-1];

}

int main() {
	int a[row][col] =  { 
		{ 1, 0, 1, 1, 1, 1, 0, 1, 1, 1 },
        { 1, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
        { 1, 1, 1, 0, 1, 1, 0, 1, 0, 1 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
        { 1, 1, 1, 0, 1, 1, 1, 0, 1, 0 }};
        int x,y;
        cout<<"enter destination x";
        cin>>x;
        cout<<"enter destination y";
        cin>>y;
	cout<<find_shortest_path(a,x,y);
	return 0;
	
}
