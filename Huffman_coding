#include<iostream>
#include<queue>
#include<vector>
#include<string>
using namespace std;

struct minHeap {
	char data;
	int freq;
	struct minHeap *left;
	struct minHeap *right;
};

struct Compare {
	bool operator()(minHeap *l, minHeap *r) {
		return l->freq > r->freq;
	}
};

void print (struct minHeap *root, string str) {
	if(!root) return;
	if(root->data != '$') {
		cout<<root->data<<" = "<<str<<"\n";
	} 
	print(root->left,str+"0");
	print(root->right,str+"1");
}

void HuffmanCodes(char arr[],int f[],int n) {
	priority_queue<minHeap*, vector<minHeap *>, Compare> pq;
	for(int i=0;i<n;i++) {
		minHeap *m = new minHeap;
		m->data = arr[i];
		m->freq = f[i];
		m->left = m->right = NULL;
		pq.push(m);
	}
	
	while(pq.size()>1) {
		minHeap *m = new minHeap;
		m->left = pq.top();
		pq.pop();
		m->right = pq.top();
		pq.pop();
		m->data ='$';
		m->freq=m->left->freq + m->right->freq;
		pq.push(m);
	}
	print(pq.top(),"");
}

int main() {
    char arr[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
    int f[] = { 5, 9, 12, 13, 16, 45 };
    int size = sizeof(arr) / sizeof(arr[0]);
 
    HuffmanCodes(arr, f, size);
    return 0;
}
